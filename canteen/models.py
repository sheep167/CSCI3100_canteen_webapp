# Although we are using NoSQL,
# this file is used for validating data entry or packing them as json object.
# Type ObjectId is the _id generated by MongoDB automatically on every insert operation

from typing import List, Union
from bson import ObjectId
import datetime
from canteen import mongo, login_manager
from flask_login import UserMixin


class bcrypt_password(str):
    pass


@login_manager.user_loader
def load_user(user_id):
    user_json = mongo.db.users.find_one({'_id': ObjectId(user_id)})
    return LoginUser(user_json)


class LoginUser(UserMixin):
    def __init__(self, user_json):
        self.user_json = user_json

    # Overriding get_id is required if you don't have the id property
    # Check the source code for UserMixin for details
    def get_id(self):
        object_id = self.user_json.get('_id')
        return str(object_id)


class User:
    def __init__(self, email, password, username):
        self.email: str = email
        self.password: bcrypt_password = password  # This should be a bcrypt-encrypted password
        self.auth_type: int = 2  # 0: administrator, 1: canteen owner, 2: student
        self.confirmed: int = 0
        self.username: str = username
        self.balance: float = 0

    def to_json(self):
        # This function turns all attributes value to dict (json) for MongoDB
        return self.__dict__


class Canteen:
    def __init__(self, name, longitude, latitude, open_at, close_at, capacity):
        self.name: str = name
        self.longitude: float = longitude
        self.latitude: float = latitude
        self.open_at: datetime.time = open_at
        self.close_at: datetime.time = close_at
        self.capacity: int = capacity
        self.menu: List[ObjectId] = []  # Dishes are stored in here

    def to_json(self):
        return self.__dict__


class Dishes:
    def __init__(self, name, in_canteen, price, ingredients, image_file_name):
        self.name: str = name
        self.in_canteen: ObjectId = in_canteen
        self.price: float = price
        self.ingredients: List[str] = ingredients
        self.rating: Union[int, None] = None  # Average rating is updated on every comment
        self.image_file_name: str = image_file_name  # Image file name

    def to_json(self):
        return self.__dict__


class Order:
    def __init__(self, created_time, created_by_user, created_at_canteen, food, total_price):
        self.created_time: datetime.datetime = created_time
        self.created_by_user: ObjectId = created_by_user
        self.created_at_canteen: ObjectId = created_at_canteen
        self.food: List[ObjectId] = food
        self.total_price: float = total_price
        self.order_status: str = 'waiting'  # waiting, fulfilled, unfulfilled

    def to_json(self):
        return self.__dict__


class Comment:
    def __init__(self, posted_time, posted_by_user, posted_on_canteen, rating, paragraph):
        self.posted_time: datetime.datetime = posted_time
        self.posted_by_user: ObjectId = posted_by_user
        self.posted_on_canteen: ObjectId = posted_on_canteen
        self.rating: int = rating
        self.paragraph: str = paragraph

    def to_json(self):
        return self.__dict__
